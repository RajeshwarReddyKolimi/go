// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/random/random.go
//
// Generated by this command:
//
//	mockgen -source=usecases/random/random.go -destination=mocks/mock_random.go
//

// Package mock_random is a generated GoMock package.
package mock_random

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRandomStatusGenerator is a mock of RandomStatusGenerator interface.
type MockRandomStatusGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockRandomStatusGeneratorMockRecorder
	isgomock struct{}
}

// MockRandomStatusGeneratorMockRecorder is the mock recorder for MockRandomStatusGenerator.
type MockRandomStatusGeneratorMockRecorder struct {
	mock *MockRandomStatusGenerator
}

// NewMockRandomStatusGenerator creates a new mock instance.
func NewMockRandomStatusGenerator(ctrl *gomock.Controller) *MockRandomStatusGenerator {
	mock := &MockRandomStatusGenerator{ctrl: ctrl}
	mock.recorder = &MockRandomStatusGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomStatusGenerator) EXPECT() *MockRandomStatusGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockRandomStatusGenerator) Generate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockRandomStatusGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockRandomStatusGenerator)(nil).Generate))
}
