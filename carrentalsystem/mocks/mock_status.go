// Code generated by MockGen. DO NOT EDIT.
// Source: usecases/statusgenerator/statusgenerator.go
//
// Generated by this command:
//
//	mockgen -source=usecases/statusgenerator/statusgenerator.go -destination=mocks/mock_status.go
//

// Package mock_statusgenerator is a generated GoMock package.
package mock_statusgenerator

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStatusGenerator is a mock of StatusGenerator interface.
type MockStatusGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockStatusGeneratorMockRecorder
	isgomock struct{}
}

// MockStatusGeneratorMockRecorder is the mock recorder for MockStatusGenerator.
type MockStatusGeneratorMockRecorder struct {
	mock *MockStatusGenerator
}

// NewMockStatusGenerator creates a new mock instance.
func NewMockStatusGenerator(ctrl *gomock.Controller) *MockStatusGenerator {
	mock := &MockStatusGenerator{ctrl: ctrl}
	mock.recorder = &MockStatusGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusGenerator) EXPECT() *MockStatusGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockStatusGenerator) Generate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockStatusGeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockStatusGenerator)(nil).Generate))
}
